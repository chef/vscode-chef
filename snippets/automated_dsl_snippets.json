{
  "_32_bit?": {
    "prefix": "_32_bit?",
    "body": "_32_bit?",
    "description": "Determine if the current architecture is 32-bit. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "_64_bit?": {
    "prefix": "_64_bit?",
    "body": "_64_bit?",
    "description": "Determine if the current architecture is 64-bit. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "aix?": {
    "prefix": "aix?",
    "body": "aix?",
    "description": "Determine if the current node is a member of the 'aix' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "aix_platform?": {
    "prefix": "aix_platform?",
    "body": "aix_platform?",
    "description": "Determine if the current node is AIX. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "alibaba?": {
    "prefix": "alibaba?",
    "body": "alibaba?",
    "description": "Determine if the current node is running in Alibaba Cloud. Introduced in Chef Infra Client 17.0.",
    "scope": "source.ruby.chef"
  },
  "amazon?": {
    "prefix": "amazon?",
    "body": "amazon?",
    "description": "Determine if the current node is a member of the 'amazon' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "amazon_platform?": {
    "prefix": "amazon_platform?",
    "body": "amazon_platform?",
    "description": "Determine if the current node is Amazon Linux. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "arch?": {
    "prefix": "arch?",
    "body": "arch?",
    "description": "Determine if the current node is a member of the 'arch' family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "arch_platform?": {
    "prefix": "arch_platform?",
    "body": "arch_platform?",
    "description": "Determine if the current node is Arch Linux. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "arm?": {
    "prefix": "arm?",
    "body": "arm?",
    "description": "Determine if the current architecture is arm. Introduced in Chef Infra Client 15.10.",
    "scope": "source.ruby.chef"
  },
  "armhf?": {
    "prefix": "armhf?",
    "body": "armhf?",
    "description": "Determine if the current architecture is 32-bit ARM hard float. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "azure?": {
    "prefix": "azure?",
    "body": "azure?",
    "description": "Determine if the current node is running in Microsoft Azure. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "bsd_based?": {
    "prefix": "bsd_based?",
    "body": "bsd_based?",
    "description": "All of the BSD-lineage.\n\nNote that macOS is not included since macOS deviates so significantly from BSD that including it would not be useful. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "build_resource": {
    "prefix": "build_resource",
    "body": "build_resource",
    "description": "Instantiate a resource of the given +type+ with the given +name+ and\nattributes as given in the +resource_attrs_block+.\n\nThe resource is NOT added to the resource collection.",
    "scope": "source.ruby.chef"
  },
  "centos_platform?": {
    "prefix": "centos_platform?",
    "body": "centos_platform?",
    "description": "Determine if the current node is CentOS. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "centos_stream_platform?": {
    "prefix": "centos_stream_platform?",
    "body": "centos_stream_platform?",
    "description": "Determine if the current node is CentOS Stream. Introduced in Chef Infra Client 17.0.",
    "scope": "source.ruby.chef"
  },
  "chef_vault": {
    "prefix": "chef_vault",
    "body": "chef_vault",
    "description": "Helper method that allows for listing the ids of a vault in a recipe.\nThis method is needed because data_bag() returns the keys along with\nthe items, so this method strips out the keys for users so that they\ndon't have to do it in their recipes.",
    "scope": "source.ruby.chef"
  },
  "chef_vault_item": {
    "prefix": "chef_vault_item",
    "body": "chef_vault_item",
    "description": "Helper method which provides a Recipe/Resource DSL for wrapping\ncreation of {ChefVault::Item}.\nFalls back to normal data bag item loading if the item is not\nactually a Chef Vault item. This is controlled via\n+node['chef-vault']['databag_fallback']+.",
    "scope": "source.ruby.chef"
  },
  "chef_vault_item_for_environment": {
    "prefix": "chef_vault_item_for_environment",
    "body": "chef_vault_item_for_environment",
    "description": "Helper method which provides an environment wrapper for a data bag.\nThis allows for easy access to current environment secrets inside\nof an item.",
    "scope": "source.ruby.chef"
  },
  "ci?": {
    "prefix": "ci?",
    "body": "ci?",
    "description": "Determine if the node is running in a CI system that sets the CI env var. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "clearos_platform?": {
    "prefix": "clearos_platform?",
    "body": "clearos_platform?",
    "description": "Determine if the current node is ClearOS. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "cloud?": {
    "prefix": "cloud?",
    "body": "cloud?",
    "description": "Determine if the current node is running in a known cloud. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "darwin?": {
    "prefix": "darwin?",
    "body": "darwin?",
    "description": "Determine if the current node is Darwin. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "debian?": {
    "prefix": "debian?",
    "body": "debian?",
    "description": "Determine if the current node is a member of the 'debian' platform family (Debian, Ubuntu and derivatives). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "debian_platform?": {
    "prefix": "debian_platform?",
    "body": "debian_platform?",
    "description": "Determine if the current node is Debian. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "debianrcd?": {
    "prefix": "debianrcd?",
    "body": "debianrcd?",
    "description": "Returns if debian's old rc.d manager is installed (not necessarily the primary init system). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "declare_resource": {
    "prefix": "declare_resource",
    "body": "declare_resource",
    "description": "Instantiates a resource (via #build_resource), then adds it to the\nresource collection. Note that resource classes are looked up directly,\nso this will create the resource you intended even if the method name\ncorresponding to that resource has been overridden.",
    "scope": "source.ruby.chef"
  },
  "delete_resource": {
    "prefix": "delete_resource",
    "body": "delete_resource",
    "description": "Lookup a resource in the resource collection by name and delete it.  Returns\nnil if the resource is not found and should not fail.",
    "scope": "source.ruby.chef"
  },
  "delete_resource!": {
    "prefix": "delete_resource!",
    "body": "delete_resource!",
    "description": "Lookup a resource in the resource collection by name and delete it.  This\nwill raise Chef::Exceptions::ResourceNotFound if the resource is not found.",
    "scope": "source.ruby.chef"
  },
  "digital_ocean?": {
    "prefix": "digital_ocean?",
    "body": "digital_ocean?",
    "description": "Determine if the current node is running in DigitalOcean. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "docker?": {
    "prefix": "docker?",
    "body": "docker?",
    "description": "Determine if the node is a docker container. Introduced in Chef Infra Client 12.11.",
    "scope": "source.ruby.chef"
  },
  "dragonfly_platform?": {
    "prefix": "dragonfly_platform?",
    "body": "dragonfly_platform?",
    "description": "Determine if the current node is DragonFly BSD. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "dragonflybsd?": {
    "prefix": "dragonflybsd?",
    "body": "dragonflybsd?",
    "description": "Determine if the current node is a member of the 'dragonflybsd' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "ec2?": {
    "prefix": "ec2?",
    "body": "ec2?",
    "description": "Determine if the current node is running in AWS EC2. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "edit_resource": {
    "prefix": "edit_resource",
    "body": "edit_resource",
    "description": "Lookup a resource in the resource collection by name.  If it exists,\nreturn it.  If it does not exist, create it.  This is a useful function\nfor accumulator patterns.  In CRUD terminology this is an \"upsert\" operation and is\nused to assert that the resource must exist with the specified properties.",
    "scope": "source.ruby.chef"
  },
  "edit_resource!": {
    "prefix": "edit_resource!",
    "body": "edit_resource!",
    "description": "Lookup a resource in the resource collection by name and edit the resource.  If the resource is not\nfound this will raise Chef::Exceptions::ResourceNotFound.  This is the correct API to use for\n\"chef_rewind\" functionality.",
    "scope": "source.ruby.chef"
  },
  "effortless?": {
    "prefix": "effortless?",
    "body": "effortless?",
    "description": "Determine if the node is using the Chef Effortless pattern in which the Chef Infra Client is packaged using Chef Habitat. Introduced in Chef Infra Client 17.0.",
    "scope": "source.ruby.chef"
  },
  "eucalyptus?": {
    "prefix": "eucalyptus?",
    "body": "eucalyptus?",
    "description": "Determine if the current node is running in Eucalyptus. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "fedora?": {
    "prefix": "fedora?",
    "body": "fedora?",
    "description": "Determine if the current node is a member of the 'fedora' platform family (Fedora and Arista). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "fedora_derived?": {
    "prefix": "fedora_derived?",
    "body": "fedora_derived?",
    "description": "RPM-based distros which are not SuSE and are very loosely similar to fedora, using yum or dnf. The historical\nlineage of the distro should have forked off from old redhat fedora distros at some point. Currently rhel,\nfedora and amazon. This is most useful for \"smells like redhat, but isn't SuSE\". Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "fedora_platform?": {
    "prefix": "fedora_platform?",
    "body": "fedora_platform?",
    "description": "Determine if the current node is Fedora. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "find_resource": {
    "prefix": "find_resource",
    "body": "find_resource",
    "description": "Lookup a resource in the resource collection by name.  If the resource is not found\nthe will be no exception raised and the call will return nil.  If a block is given and\nno resource is found it will create the resource using the block, if the resource is\nfound then the block will not be applied.  The block version is similar to create_if_missing.",
    "scope": "source.ruby.chef"
  },
  "find_resource!": {
    "prefix": "find_resource!",
    "body": "find_resource!",
    "description": "Lookup a resource in the resource collection by name.  If the resource is not\nfound this will raise Chef::Exceptions::ResourceNotFound.  This API is identical to the\nresources() call and while it is a synonym it is not intended to deprecate that call.",
    "scope": "source.ruby.chef"
  },
  "freebsd?": {
    "prefix": "freebsd?",
    "body": "freebsd?",
    "description": "Determine if the current node is a member of the 'freebsd' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "freebsd_platform?": {
    "prefix": "freebsd_platform?",
    "body": "freebsd_platform?",
    "description": "Determine if the current node is FreeBSD. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "gce?": {
    "prefix": "gce?",
    "body": "gce?",
    "description": "Determine if the current node running in Google Compute Engine (GCE). Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "gentoo?": {
    "prefix": "gentoo?",
    "body": "gentoo?",
    "description": "Determine if the current node is a member of the 'gentoo' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "gentoo_platform?": {
    "prefix": "gentoo_platform?",
    "body": "gentoo_platform?",
    "description": "Determine if the current node is Gentoo. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "guest?": {
    "prefix": "guest?",
    "body": "guest?",
    "description": "Determine if the current node is running under any virtualization environment. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "has_systemd_service_unit?": {
    "prefix": "has_systemd_service_unit?",
    "body": "has_systemd_service_unit?",
    "description": "Determine if the a systemd service unit is present on the system. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "has_systemd_unit?": {
    "prefix": "has_systemd_unit?",
    "body": "has_systemd_unit?",
    "description": "Determine if the a systemd unit of any type is present on the system. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "hypervisor?": {
    "prefix": "hypervisor?",
    "body": "hypervisor?",
    "description": "Determine if the current node supports running guests under any virtualization environment. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "i386?": {
    "prefix": "i386?",
    "body": "i386?",
    "description": "Determine if the current architecture is i386. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "includes_recipe?": {
    "prefix": "includes_recipe?",
    "body": "includes_recipe?",
    "description": "Determine if the current node includes the given recipe name. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "insserv?": {
    "prefix": "insserv?",
    "body": "insserv?",
    "description": "Returns if insserv is installed (not necessarily the primary init system). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "intel?": {
    "prefix": "intel?",
    "body": "intel?",
    "description": "Determine if the current architecture is Intel. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "invokercd?": {
    "prefix": "invokercd?",
    "body": "invokercd?",
    "description": "Returns if debian's old invoke rc.d manager is installed (not necessarily the primary init system). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "kitchen?": {
    "prefix": "kitchen?",
    "body": "kitchen?",
    "description": "Determine if the node is running in Test Kitchen. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "kvm?": {
    "prefix": "kvm?",
    "body": "kvm?",
    "description": "Determine if the current node is a KVM guest. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "kvm_host?": {
    "prefix": "kvm_host?",
    "body": "kvm_host?",
    "description": "Determine if the current node is a KVM host. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "linode?": {
    "prefix": "linode?",
    "body": "linode?",
    "description": "Determine if the current node is running in Linode. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "linux?": {
    "prefix": "linux?",
    "body": "linux?",
    "description": "Determine if the current node is Linux. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "linuxmint_platform?": {
    "prefix": "linuxmint_platform?",
    "body": "linuxmint_platform?",
    "description": "Determine if the current node is linux mint. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "lxc?": {
    "prefix": "lxc?",
    "body": "lxc?",
    "description": "Determine if the current node is running in a linux container. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "lxc_host?": {
    "prefix": "lxc_host?",
    "body": "lxc_host?",
    "description": "Determine if the current node is a linux container host. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "macos?": {
    "prefix": "macos?",
    "body": "macos?",
    "description": "Determine if the current node is a member of the 'mac_os_x' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "macos_platform?": {
    "prefix": "macos_platform?",
    "body": "macos_platform?",
    "description": "Determine if the current node is macOS. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "macos_ruby?": {
    "prefix": "macos_ruby?",
    "body": "macos_ruby?",
    "description": "Determine if the Ruby VM is currently running on a Mac node (This is useful primarily for internal use\nby Chef Infra Client before the node object exists). Introduced in Chef Infra Client 17.3.",
    "scope": "source.ruby.chef"
  },
  "netbsd?": {
    "prefix": "netbsd?",
    "body": "netbsd?",
    "description": "Determine if the current node is a member of the 'netbsd' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "netbsd_platform?": {
    "prefix": "netbsd_platform?",
    "body": "netbsd_platform?",
    "description": "Determine if the current node is NetBSD. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "omnios_platform?": {
    "prefix": "omnios_platform?",
    "body": "omnios_platform?",
    "description": "Determine if the current node is OmniOS. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "openbsd?": {
    "prefix": "openbsd?",
    "body": "openbsd?",
    "description": "Determine if the current node is a member of the 'openbsd' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "openbsd_platform?": {
    "prefix": "openbsd_platform?",
    "body": "openbsd_platform?",
    "description": "Determine if the current node is OpenBSD. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "openindiana_platform?": {
    "prefix": "openindiana_platform?",
    "body": "openindiana_platform?",
    "description": "Determine if the current node is OpenIndiana. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "openstack?": {
    "prefix": "openstack?",
    "body": "openstack?",
    "description": "Determine if the current node is running in OpenStack. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "opensuse_platform?": {
    "prefix": "opensuse_platform?",
    "body": "opensuse_platform?",
    "description": "Determine if the current node is openSUSE. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "openvz?": {
    "prefix": "openvz?",
    "body": "openvz?",
    "description": "Determine if the current node is an openvz guest. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "openvz_host?": {
    "prefix": "openvz_host?",
    "body": "openvz_host?",
    "description": "Determine if the current node is an openvz host. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "oracle_platform?": {
    "prefix": "oracle_platform?",
    "body": "oracle_platform?",
    "description": "Determine if the current node is Oracle Linux. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "parallels?": {
    "prefix": "parallels?",
    "body": "parallels?",
    "description": "Determine if the current node is running under Parallels Desktop. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "parallels_host?": {
    "prefix": "parallels_host?",
    "body": "parallels_host?",
    "description": "Determine if the current node is a Parallels Desktop host. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "physical?": {
    "prefix": "physical?",
    "body": "physical?",
    "description": "Determine if the current node is NOT running under any virtualization environment (bare-metal or hypervisor on metal). Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "platform_version": {
    "prefix": "platform_version",
    "body": "platform_version",
    "description": "Return the platform_version for the node. Acts like a String\nbut also provides a mechanism for checking version constraints. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "powerpc?": {
    "prefix": "powerpc?",
    "body": "powerpc?",
    "description": "Determine if the current architecture is PowerPC. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "powershell_version": {
    "prefix": "powershell_version",
    "body": "powershell_version",
    "description": "Determine the installed version of PowerShell. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "ppc64?": {
    "prefix": "ppc64?",
    "body": "ppc64?",
    "description": "Determine if the current architecture is PowerPC 64bit Big Endian. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "ppc64le?": {
    "prefix": "ppc64le?",
    "body": "ppc64le?",
    "description": "Determine if the current architecture is PowerPC 64bit Little Endian. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "rackspace?": {
    "prefix": "rackspace?",
    "body": "rackspace?",
    "description": "Determine if the current node is running in Rackspace. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "raspbian_platform?": {
    "prefix": "raspbian_platform?",
    "body": "raspbian_platform?",
    "description": "Determine if the current node is Raspbian. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "redhat_based?": {
    "prefix": "redhat_based?",
    "body": "redhat_based?",
    "description": "RedHat distros -- fedora and rhel platform_families, nothing else. This is most likely not as useful as the\n\"fedora_derived?\" helper. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "redhat_platform?": {
    "prefix": "redhat_platform?",
    "body": "redhat_platform?",
    "description": "Determine if the current node is Red Hat Enterprise Linux. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "redhatrcd?": {
    "prefix": "redhatrcd?",
    "body": "redhatrcd?",
    "description": "Returns if redhat's init system is installed (not necessarily the primary init system). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "resources": {
    "prefix": "resources",
    "body": "resources",
    "description": "Find existing resources by searching the list of existing resources.  Possible\nforms are:\n\n  find(:file => \"foobar\")\n  find(:file => [ \"foobar\", \"baz\" ])\n  find(\"file[foobar]\", \"file[baz]\")\n  find(\"file[foobar,baz]\")\n\nCalls `run_context.resource_collection.find(*args)`\n\nThe is backcompat API, the use of find_resource, below, is encouraged.",
    "scope": "source.ruby.chef"
  },
  "rhel6?": {
    "prefix": "rhel6?",
    "body": "rhel6?",
    "description": "Determine if the current node is a rhel6 compatible build (Red Hat, CentOS, Oracle or Scientific Linux). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "rhel7?": {
    "prefix": "rhel7?",
    "body": "rhel7?",
    "description": "Determine if the current node is a rhel7 compatible build (Red Hat, CentOS, Oracle or Scientific Linux). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "rhel8?": {
    "prefix": "rhel8?",
    "body": "rhel8?",
    "description": "Determine if the current node is a rhel8 compatible build (Red Hat, CentOS, Oracle or Scientific Linux). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "rhel?": {
    "prefix": "rhel?",
    "body": "rhel?",
    "description": "Determine if the current node is a member of the 'rhel' platform family (Red Hat, CentOS, Oracle or Scientific Linux, but NOT Amazon Linux or Fedora). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "rpm_based?": {
    "prefix": "rpm_based?",
    "body": "rpm_based?",
    "description": "If it uses RPM, it goes in here (rhel, fedora, amazon, suse platform_families).  Deliberately does not\ninclude AIX because bff is AIX's primary package manager and adding it here would make this substantially\nless useful since in no way can AIX trace its lineage back to old redhat distros.  This is most useful for\n\"smells like redhat, including SuSE\". Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "s390?": {
    "prefix": "s390?",
    "body": "s390?",
    "description": "Determine if the current architecture is s390. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "s390x?": {
    "prefix": "s390x?",
    "body": "s390x?",
    "description": "Determine if the current architecture is s390x. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "scientific_platform?": {
    "prefix": "scientific_platform?",
    "body": "scientific_platform?",
    "description": "Determine if the current node is Scientific Linux. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "secret": {
    "prefix": "secret",
    "body": "secret",
    "description": "Helper method which looks up a secret using the given service and configuration,\nand returns the retrieved secret value.\nThis DSL providers a wrapper around [Chef::SecretFetcher]\n\nUse of the secret helper in the context of a resource block will automatically mark\nthat resource as 'sensitive', preventing resource data from being logged.  See [Chef::Resource#sensitive].\n\nSee individual fetcher documentation to know what to expect for a given service.\n\nThis example uses the built-in :example secret manager service, which\naccepts a hash of secrets.\n\n  value = secret(name: \"test1\", service: :example, config: { \"test1\" => \"value1\" })\n  log \"My secret is #{value}\"\n\n  value = secret(name: \"test1\", service: :aws_secrets_manager, version: \"v1\", config: { region: \"us-west-1\" })\n  log \"My secret is #{value}\".",
    "scope": "source.ruby.chef"
  },
  "service_script_exist?": {
    "prefix": "service_script_exist?",
    "body": "service_script_exist?",
    "description": "Returns if a particular service exists for a particular service init system. Init systems may be :initd, :upstart, :etc_rcd, :xinetd, and :systemd. Example: service_script_exist?(:systemd, 'ntpd'). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "slackware_platform?": {
    "prefix": "slackware_platform?",
    "body": "slackware_platform?",
    "description": "Determine if the current node is Slackware. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "smartos?": {
    "prefix": "smartos?",
    "body": "smartos?",
    "description": "Determine if the current node is a member of the 'smartos' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "smartos_platform?": {
    "prefix": "smartos_platform?",
    "body": "smartos_platform?",
    "description": "Determine if the current node is SmartOS. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "softlayer?": {
    "prefix": "softlayer?",
    "body": "softlayer?",
    "description": "Determine if the current node is running in SoftLayer (IBM Cloud). Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "solaris2?": {
    "prefix": "solaris2?",
    "body": "solaris2?",
    "description": "Determine if the current node is a member of the 'solaris2' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "solaris2_platform?": {
    "prefix": "solaris2_platform?",
    "body": "solaris2_platform?",
    "description": "Determine if the current node is Solaris2. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "solaris_based?": {
    "prefix": "solaris_based?",
    "body": "solaris_based?",
    "description": "All of the Solaris-lineage. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "sparc?": {
    "prefix": "sparc?",
    "body": "sparc?",
    "description": "Determine if the current architecture is SPARC. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "suse?": {
    "prefix": "suse?",
    "body": "suse?",
    "description": "Determine if the current node is a member of the 'suse' platform family (openSUSE, SLES, and SLED). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "suse_platform?": {
    "prefix": "suse_platform?",
    "body": "suse_platform?",
    "description": "Determine if the current node is SuSE. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "systemd?": {
    "prefix": "systemd?",
    "body": "systemd?",
    "description": "Determine if the node uses the systemd init system. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "ubuntu_platform?": {
    "prefix": "ubuntu_platform?",
    "body": "ubuntu_platform?",
    "description": "Determine if the current node is Ubuntu. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "upstart?": {
    "prefix": "upstart?",
    "body": "upstart?",
    "description": "Returns if upstart is installed (not necessarily the primary init system). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "vagrant?": {
    "prefix": "vagrant?",
    "body": "vagrant?",
    "description": "Determine if the current node is running as a vagrant guest.\n\nNote that this API is equivalent to just looking for the vagrant user or the\nvagrantup.com domain in the hostname, which is the best API we have. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "vbox?": {
    "prefix": "vbox?",
    "body": "vbox?",
    "description": "Determine if the current node is a VirtualBox guest. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "vbox_host?": {
    "prefix": "vbox_host?",
    "body": "vbox_host?",
    "description": "Determine if the current node is a VirtualBox host. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "vmware?": {
    "prefix": "vmware?",
    "body": "vmware?",
    "description": "Determine if the current node is a VMWare guest. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "vmware_host?": {
    "prefix": "vmware_host?",
    "body": "vmware_host?",
    "description": "Determine if the current node is VMware host. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "where": {
    "prefix": "where",
    "body": "where",
    "description": "Lookup all the instances of an an executable that can be found through the systems search PATH.\nAllows specifying an array of executables to look for.  All the instances of the first executable\nthat is found will be returned first.  The extra_path will override any default extra_paths\nwhich are added (allowing the user to pass an empty array to remove them).\n\nWhen passed a block the block will be called with the full pathname of any executables\nwhich are found, and the block should return truthy or falsey values to further filter\nthe executable based on arbitrary criteria.\n\nThis helper can be used in target mode in chef or with train using the appropriate\nwiring externally.\n\n  cmds = where(\"platform-python\", \"python\", \"python3\", \"python2\", \"python2.7\", extra_path: \"/usr/libexec\") do |f|\n    shell_out(\"#{f} -c 'import dnf'\").exitstatus == 0\n  end.",
    "scope": "source.ruby.chef"
  },
  "which": {
    "prefix": "which",
    "body": "which",
    "description": "Lookup an executable through the systems search PATH.  Allows specifying an array\nof executables to look for.  The first executable that is found, along any path entry,\nwill be the preferred one and returned first.  The extra_path will override any default\nextra_paths which are added (allowing the user to pass an empty array to remove them).\n\nWhen passed a block the block will be called with the full pathname of any executables\nwhich are found, and the block should return truthy or falsey values to further filter\nthe executable based on arbitrary criteria.\n\nThis is syntactic sugar for `where(...).first`\n\nThis helper can be used in target mode in chef or with train using the appropriate\nwiring externally.\n\n  cmd = which(\"platform-python\", \"python\", \"python3\", \"python2\", \"python2.7\", extra_path: \"/usr/libexec\") do |f|\n    shell_out(\"#{f} -c 'import dnf'\").exitstatus == 0\n  end.",
    "scope": "source.ruby.chef"
  },
  "windows?": {
    "prefix": "windows?",
    "body": "windows?",
    "description": "Determine if the current node is a member of the 'windows' platform family. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "windows_nt_version": {
    "prefix": "windows_nt_version",
    "body": "windows_nt_version",
    "description": "Determine the current Windows NT version. The NT version often differs from the marketing version, but offers a good way to find desktop and server releases that are based on the same codebase. For example NT 6.3 corresponds to Windows 8.1 and Windows 2012 R2. Introduced in Chef Infra Client 15.8.",
    "scope": "source.ruby.chef"
  },
  "windows_platform?": {
    "prefix": "windows_platform?",
    "body": "windows_platform?",
    "description": "Determine if the current node is Windows. Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "windows_ruby?": {
    "prefix": "windows_ruby?",
    "body": "windows_ruby?",
    "description": "Determine if the Ruby VM is currently running on a Windows node (ChefSpec can never stub\nthis behavior, so this is useful for code which can never be parsed on a non-Windows box). Introduced in Chef Infra Client 15.5.",
    "scope": "source.ruby.chef"
  },
  "windows_server?": {
    "prefix": "windows_server?",
    "body": "windows_server?",
    "description": "Determine if the current node is Windows Server. Introduced in Chef Infra Client 15.7.",
    "scope": "source.ruby.chef"
  },
  "windows_server_core?": {
    "prefix": "windows_server_core?",
    "body": "windows_server_core?",
    "description": "Determine if the current node is Windows Server Core. Introduced in Chef Infra Client 15.7.",
    "scope": "source.ruby.chef"
  },
  "windows_workstation?": {
    "prefix": "windows_workstation?",
    "body": "windows_workstation?",
    "description": "Determine if the current node is Windows Workstation. Introduced in Chef Infra Client 15.7.",
    "scope": "source.ruby.chef"
  },
  "with_run_context": {
    "prefix": "with_run_context",
    "body": "with_run_context",
    "description": "Helper for switching run_contexts.  Allows for using :parent or :root in place of\npassing the run_context.  Executes the block in the run_context.  Returns the return\nvalue of the passed block.",
    "scope": "source.ruby.chef"
  }
}
