{
	"apt_package": {
		"prefix": "apt_package",
		"body": "apt_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the apt_package resource to manage packages for the Debian and Ubuntu platforms.",
		"scope": "source.ruby.chef"
	},
	"apt_preference": {
		"prefix": "apt_preference",
		"body": "apt_preference '${1:name}' do\r\n\tpin '${2:version 1.2.3}'\r\n\tpin_priority ${3:700}\r\n\taction :${4:add}\r\nend\r\n",
		"description": "Use the apt_preference resource to manage APT preference files for the Debian and Ubuntu platforms.",
		"scope": "source.ruby.chef"
	},
	"apt_repository": {
		"prefix": "apt_repository",
		"body": "apt_repository '${1:name}' do\r\n\turi '${2:https://example.com/deb}'\r\n\tcomponents ${3:['main']}\r\n\taction :${4:add}\r\nend\r\n",
		"description": "Use the apt_repository resource to manage APT repositories for the Debian and Ubuntu platforms.",
		"scope": "source.ruby.chef"
	},
	"apt_update": {
		"prefix": "apt_update",
		"body": "apt_update '${1:name}' do\r\n\tignore_failure '${2:true}'\r\n\taction :${3:update}\r\nend\r\n",
		"description": "Use the apt_update resource to manage APT cache for the Debian and Ubuntu platforms.",
		"scope": "source.ruby.chef"
	},
	"bash": {
		"prefix": "bash",
		"body": "bash '${1:name}' do\r\n\tcode <<-EOH\r\n\t${5:script commands}\r\n\tEOH\r\n\taction :${2:run}\r\nend\r\n",
		"description": "A bash resource block executes scripts using Bash.",
		"scope": "source.ruby.chef"
	},
	"batch": {
		"prefix": "batch",
		"body": "batch '${1:name}' do\r\n\tcode <<-EOH\r\n\t${5:batch commands}\r\n\tEOH\r\n\taction :${2:run}\r\nend\r\n",
		"description": "A batch resource block executes a batch script using the cmd.exe interpreter.",
		"scope": "source.ruby.chef"
	},
	"bff_package": {
		"prefix": "bff_package",
		"body": "bff_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the bff_package resource to manage packages for the Aix platform.",
		"scope": "source.ruby.chef"
	},
	"breakpoint": {
		"prefix": "breakpoint",
		"body": "breakpoint '${1:name}' do\r\n\taction :${2:break}\r\nend\r\n",
		"description": "A breakpoint resource block creates a breakpoint in a recipe.",
		"scope": "source.ruby.chef"
	},
	"cab_package": {
		"prefix": "cab_package",
		"body": "cab_package '${1:name}' do\r\n\tsource '${2:C:\\path\\to\\a.cab}'\r\n\taction :${3:install}\r\nend\r\n",
		"description": "Use the cab_package resource to install or remove Microsoft Windows cabinet (.cab) packages.",
		"scope": "source.ruby.chef"
	},
	"chef_gem": {
		"prefix": "chef_gem",
		"body": "chef_gem '${1:package_name}' do\r\n\taction :${2:break}\r\nend\r\n",
		"description": "A chef_gem resource block manages a package on a node, typically by installing it.",
		"scope": "source.ruby.chef"
	},
	"chef_handler": {
		"prefix": "chef_handler",
		"body": "chef_handler '${1:package_name}' do\r\n\tsource '${2:/path/to/handler/handler_name}'\r\n\taction :${3:enable}\r\nend\r\n",
		"description": "Exception and report handlers are used to trigger certain behaviors in response to specific situations, typically identified during a chef-client run.",
		"scope": "source.ruby.chef"
	},
	"chocolatey_package": {
		"prefix": "chocolatey_package",
		"body": "chocolatey_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the chocolatey_package resource to manage packages using Chocolatey on the Microsoft Windows platform.",
		"scope": "source.ruby.chef"
	},
	"cookbook_file": {
		"prefix": "cookbook_file",
		"body": "cookbook_file '${1:/path/to/file}' do\r\n\tsource '${2:filename}'\r\n\towner '${3:root}'\r\n\tgroup '${4:$3}'\r\n\tmode '${5:0755}'\r\n\taction :${6:create}\r\nend\r\n",
		"description": "A cookbook_file resource block manages files by using files that exist within a cookbook’s /files directory",
		"scope": "source.ruby.chef"
	},
	"cron": {
		"prefix": "cron",
		"body": "cron '${1:name}' do\r\n\thour '${2:5}'\r\n\tminute '${3:5}'\r\n\tcommand '${3:/bin/script}'\r\nend\r\n",
		"description": "A cron resource block manage cron entries.",
		"scope": "source.ruby.chef"
	},
	"csh": {
		"prefix": "csh",
		"body": "csh '${1:name}' do\r\n\tcode <<-EOH\r\n\t${5:script commands}\r\n\tEOH\r\n\taction :${6:run}\r\nend\r\n",
		"description": "A csh resource block executes scripts using csh.",
		"scope": "source.ruby.chef"
	},
	"describe": {
		"prefix": "describe",
		"body": "describe '${1:COOKBOOK::RECIPE}' do\r\n\t${2}\r\nend\r\n",
		"description": "A describe block for writing a unit test",
		"scope": "source.ruby.chef"
	},
	"directory": {
		"prefix": "directory",
		"body": "directory '${1:/path/to/directory}' do\r\n\towner '${2:root}'\r\n\tgroup '${3:$2}'\r\n\tmode '${4:0755}'\r\n\taction :${5:create}\r\nend\r\n",
		"description": "A directory resource block declares a directory and the permissions needed on that directory.",
		"scope": "source.ruby.chef"
	},
	"dmg_package": {
		"prefix": "dmg_package",
		"body": "dmg_package '${1:app}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the dmg_package resource to install a package from a .dmg file. The resource will retrieve the file from a remote URL, mount it using OS X’s hdidutil, copy the application to the specified destination (/Applications), and detach the image using hdiutil. The .dmg file will be stored in the Chef::Config[:file_cache_path].",
		"scope": "source.ruby.chef"
	},
	"dnf_package": {
		"prefix": "dnf_package",
		"body": "dnf_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the dnf_package resource to install, upgrade, and remove packages with DNF for Fedora platforms. The dnf_package resource is able to resolve provides data for packages much like DNF can do when it is run from the command line. This allows a variety of options for installing packages, like minimum versions, virtual provides, and library names.",
		"scope": "source.ruby.chef"
	},
	"dpkg_package": {
		"prefix": "dpkg_package",
		"body": "dpkg_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the apt_package resource to manage packages for the dpkg platform.",
		"scope": "source.ruby.chef"
	},
	"dsc_resource": {
		"prefix": "dsc_resource",
		"body": "dsc_resource '${1:name}' do\r\n\tresource :${2:resource_name}\r\n\tproperty :${3:property_name}, '${4:property_value}'\r\nend\r\n",
		"description": "A dsc_resource resource block allows DSC resource to be used in a Chef recipe.",
		"scope": "source.ruby.chef"
	},
	"dsc_script": {
		"prefix": "dsc_script",
		"body": "dsc_script '${1:name}' do\r\n\tcode <<-EOH\r\n\t${5:DSC code}\r\n\tEOH\r\nend\r\n",
		"description": "A dsc_script resource block embeds the code that defines a DSC configuration directly within a Chef recipe.",
		"scope": "source.ruby.chef"
	},
	"execute": {
		"prefix": "execute",
		"body": "execute '${1:name}' do\r\n\tcommand '${2:command}'\r\n\taction :${3:run}\r\nend\r\n",
		"description": "Use the execute resource to execute a single command.",
		"scope": "source.ruby.chef"
	},
	"expect": {
		"prefix": "expect",
		"body": "expect(chef_run).to ${1:ACTION}_${2:RESOURCE}('${3:NAME}')\r\n",
		"description": "Use the expect resource to run the unit test",
		"scope": "source.ruby.chef"
	},
	"file": {
		"prefix": "file",
		"body": "file '${1:/path/to/file}' do\r\n\tcontent '${2:content}'\r\n\towner '${3:root}'\r\n\tgroup '${4:$3}'\r\n\tmode '${5:0755}'\r\n\taction :${6:create}\r\nend\r\n",
		"description": "A file resource block manages files that exist on nodes.",
		"scope": "source.ruby.chef"
	},
	"freebsd_package": {
		"prefix": "freebsd_package",
		"body": "freebsd_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the freebsd_package resource to manage packages for the FreeBSD platform.",
		"scope": "source.ruby.chef"
	},
	"gem_package": {
		"prefix": "gem_package",
		"body": "gem_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "A gem_package resource block manages a package on a node.",
		"scope": "source.ruby.chef"
	},
	"git": {
		"prefix": "git",
		"body": "git '${1:destination}' do\r\n\trepository '${2:git_repository}'\r\n\trevision '${3:revision}'\r\n\taction :${4:sync}\r\nend\r\n",
		"description": "A git resource block manages source control resources that exist in a git repository.",
		"scope": "source.ruby.chef"
	},
	"group": {
		"prefix": "group",
		"body": "group '${1:group_name}' do\r\n\tmembers '${2:members}'\r\n\taction :${3:create}\r\nend\r\n",
		"description": "Use the group resource to manage a local group.",
		"scope": "source.ruby.chef"
	},
	"homebrew_cask": {
		"prefix": "homebrew_cask",
		"body": "homebrew_cask '${1:cask_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the homebrew_cask resource to install binaries distributed via the Homebrew package manager.",
		"scope": "source.ruby.chef"
	},
	"homebrew_package": {
		"prefix": "homebrew_package",
		"body": "homebrew_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the homebrew_package resource to manage packages for the Mac OS X platform.",
		"scope": "source.ruby.chef"
	},
	"homebrew_tap": {
		"prefix": "homebrew_tap",
		"body": "homebrew_tap '${1:tap_name}' do\r\n\taction :${2:tap}\r\nend\r\n",
		"description": "Use the homebrew_tap resource to add formula repositories to the Homebrew package manager.",
		"scope": "source.ruby.chef"
	},
	"hostname": {
		"prefix": "hostname",
		"body": "hostname '${1:hostname}' do\r\n\taction :${2:set}\r\nend\r\n",
		"description": "The hostname resource sets the system’s hostname and hosts configuration, ensures that the hostname persists after a reboot, and then re-run the Ohai plugin so the hostname will be available in subsequent cookbooks.",
		"scope": "source.ruby.chef"
	},
	"http_request": {
		"prefix": "http_request",
		"body": "http_request '${1:name}' do\r\n\turl '${2:url}'\r\n\taction :${3:get}\r\nend\r\n",
		"description": "Use the http_request resource to send an HTTP request.",
		"scope": "source.ruby.chef"
	},
	"ifconfig": {
		"prefix": "ifconfig",
		"body": "ifconfig '${1:name}' do\r\n\tdevice '${2:eth1}'\r\n\taction :${3:create}\r\nend\r\n",
		"description": "Use the ifconfig resource to manage interfaces.",
		"scope": "source.ruby.chef"
	},
	"ips_package": {
		"prefix": "ips_package",
		"body": "ips_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the ips_package resource to manage packages for the Solaris 11 platform.",
		"scope": "source.ruby.chef"
	},
	"it": {
		"prefix": "it",
		"body": "it '${1:DESCRIPTION_HERE}' do\r\n\t${2}\r\nend\r\n",
		"description": "Used in unit test to describe what the test will do",
		"scope": "source.ruby.chef"
	},
	"ksh": {
		"prefix": "ksh",
		"body": "ksh '${1:name}' do\r\n\tcode <<-EOH\r\n\t${2:ksh code}\r\n\tEOH\r\nend\r\n",
		"description": "Use the ksh resource to execute scripts using the Korn shell (ksh) interpreter. This resource may also use any of the actions and properties that are available to the execute resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use not_if and only_if to guard this resource for idempotence.",
		"scope": "source.ruby.chef"
	},
	"launchd": {
		"prefix": "launchd",
		"body": "launchd '${1:name}' do\r\n\taction :${2:create}\r\nend\r\n",
		"description": "Use the launchd resource to manage system-wide services (daemons) and per-user services (agents) on the macOS platform.",
		"scope": "source.ruby.chef"
	},
	"let": {
		"prefix": "let",
		"body": "let(:chef_run) { ChefSpec::SoloRunner.converge(described_recipe) }\r\n\r\n",
		"description": "Create the ChefSpec::SoloRunner and do a mock chef_run with run_list indicaded by the describe resource.",
		"scope": "source.ruby.chef"
	},
	"link": {
		"prefix": "link",
		"body": "link '${1:source_path}' do\r\n\tto '${2:target_path}'\r\n\tlink_type :${3:hard}\r\nend\r\n",
		"description": "Use the link resource to create symbolic or hard links.",
		"scope": "source.ruby.chef"
	},
	"log": {
		"prefix": "log",
		"body": "log '${1:message}' do\r\n\tlevel :${2:info}\r\nend\r\n",
		"description": "Use the log resource to to create log entries.",
		"scope": "source.ruby.chef"
	},
	"macos_userdefaults": {
		"prefix": "macos_userdefaults",
		"body": "macos_userdefaults '${1:description}' do\r\n\tdomain '${2:domain}'\r\n\tglobal ${3:false}\r\n\tvalue '${4:value}'\r\n\ttype '${5:type}'\r\n\taction :${6:write}\r\nend\r\n",
		"description": "Use the macos_userdefaults resource to manage the macOS user defaults system. The properties of the resource are passed to the defaults command, and the parameters follow the conventions of that command. See the defaults man page for additional information.",
		"scope": "source.ruby.chef"
	},
	"macports_package": {
		"prefix": "macports_package",
		"body": "macports_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the macports_package resource to manage packages for the Mac OSX platform.",
		"scope": "source.ruby.chef"
	},
	"mdadm": {
		"prefix": "mdadm",
		"body": "mdadm '${1:/dev/md0}' do\r\n\tdevices ['${2:/dev/sda}']\r\n\taction :${3:create}\r\nend\r\n",
		"description": "Use the mdadm resource to manage RAID devices in a Linux environment.",
		"scope": "source.ruby.chef"
	},
	"mount": {
		"prefix": "mount",
		"body": "mount '${1:path}' do\r\n\tdevice ['${2:device}']\r\n\tfstype '${2:fs_type}'\r\n\taction :${4:mount}\r\nend\r\n",
		"description": "Use the mount resource to manage a mounted file system.",
		"scope": "source.ruby.chef"
	},
	"msu_package": {
		"prefix": "msu_package",
		"body": "msu_package '${1:name}' do\r\n\tsource '${2:C:\\path\\to\\file}'\r\n\taction :${3:install}\r\nend\r\n",
		"description": "Use the msu_package resource to install Microsoft Update(MSU) packages on Microsoft Windows machines.",
		"scope": "source.ruby.chef"
	},
	"ohai_hint": {
		"prefix": "ohai_hint",
		"body": "ohai_hint '${1:hint_name}' do\r\n\tcontent Hash[:${2:key}, '${3:value}']\r\n\taction :${4:create}\r\nend\r\n",
		"description": "Use the ohai_hint resource to aid in configuration detection by passing hint data to Ohai.",
		"scope": "source.ruby.chef"
	},
	"ohai": {
		"prefix": "ohai",
		"body": "ohai '${1:name}' do\r\n\taction :${2:reload}\r\nend\r\n",
		"description": "Use the ohai resource to reload the Ohai configuration on a node.",
		"scope": "source.ruby.chef"
	},
	"openbsd_package": {
		"prefix": "openbsd_package",
		"body": "openbsd_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the openbsd_package resource to manage packages for the OpenBSD platform.",
		"scope": "source.ruby.chef"
	},
	"openssl_dhparam": {
		"prefix": "openssl_dhparam",
		"body": "openssl_dhparam '${1:path}' do\r\n\taction :${2:create}\r\nend\r\n",
		"description": "Use the openssl_dhparam resource to generate dhparam.pem files. If a valid dhparam.pem file is found at the specified location, no new file will be created. If a file is found at the specified location, but it is not a valid dhparam file, it will be overwritten.",
		"scope": "source.ruby.chef"
	},
	"openssl_rsa_private_key": {
		"prefix": "openssl_rsa_private_key",
		"body": "openssl_rsa_private_key '${1:path}' do\r\n\taction :${2:create}\r\nend\r\n",
		"description": "Use the openssl_rsa_private_key resource to generate RSA private key files. If a valid RSA key file can be opened at the specified location, no new file will be created. If the RSA key file cannot be opened or does not exist, it will be overwritten.",
		"scope": "source.ruby.chef"
	},
	"openssl_rsa_public_key": {
		"prefix": "openssl_rsa_public_key",
		"body": "openssl_rsa_public_key '${1:path}' do\r\n\taction :${2:create}\r\nend\r\n",
		"description": "Use the openssl_rsa_public_key resource to generate RSA public key files for a given RSA private key.",
		"scope": "source.ruby.chef"
	},
	"osx_profile": {
		"prefix": "osx_profile",
		"body": "osx_profile '${1:profile_name}' do\r\n\tprofile '${2:profile}\r\n\taction :${3:install}\r\nend\r\n",
		"description": "Use the osx_profile resource to manage configuration profiles (.mobileconfig files) on the macOS platform. The osx_profile resource installs profiles by using the uuidgen library to generate a unique ProfileUUID, and then using the profiles command to install the profile on the system.",
		"scope": "source.ruby.chef"
	},
	"package": {
		"prefix": "package",
		"body": "package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the package resource to manage packages.",
		"scope": "source.ruby.chef"
	},
	"pacman_package": {
		"prefix": "pacman_package",
		"body": "pacman_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the pacman_package resource to manage packages for the ArchLinux platform.",
		"scope": "source.ruby.chef"
	},
	"paludis_package": {
		"prefix": "paludis_package",
		"body": "paludis_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the paludis_package resource to manage packages for the Paludis platform.",
		"scope": "source.ruby.chef"
	},
	"perl": {
		"prefix": "perl",
		"body": "perl '${1:name}' do\r\n\tcode <<-EOH\r\n\t${2:perl code}\r\n\tEOH\r\nend\r\n",
		"description": "A perl resource block executes Perl scripts.",
		"scope": "source.ruby.chef"
	},
	"portage_package": {
		"prefix": "portage_package",
		"body": "portage_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the portage_package resource to manage packages for the Gentoo platform.",
		"scope": "source.ruby.chef"
	},
	"powershell_package": {
		"prefix": "powershell_package",
		"body": "powershell_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the powershell_package resource to install and manage packages via the Powershell Package Manager for the Microsoft Windows platform. The powershell_package resource requires administrative access, and a source must be configured in the Powershell Package Manager via the Register-PackageSource command",
		"scope": "source.ruby.chef"
	},
	"powershell_script": {
		"prefix": "powershell_script",
		"body": "powershell_script '${1:name}' do\r\n\tcode <<-EOH\r\n\t${2:powershell code}\r\n\tEOH\r\nend\r\n",
		"description": "Use the powershell_script resource to execute a script using the Windows PowerShell interpreter.",
		"scope": "source.ruby.chef"
	},
	"python": {
		"prefix": "python",
		"body": "python '${1:name}' do\r\n\tcode <<-EOH\r\n\t${2:python code}\r\n\tEOH\r\nend\r\n",
		"description": "Use the python resource to execute a script using the Python interpreter.",
		"scope": "source.ruby.chef"
	},
	"reboot": {
		"prefix": "reboot",
		"body": "reboot '${1:name}' do\r\n\taction :${2:request_reboot}\r\n\treason '${3:reason}'\r\n\tdelay_mins ${4:minutes}\r\nend\r\n",
		"description": "A reboot resource block reboots a node.",
		"scope": "source.ruby.chef"
	},
	"registry_key": {
		"prefix": "registry_key",
		"body": "registry_key '${1:key_name}' do\r\n\tvalues [{\r\n\t\tname: '${2:name}',\r\n\t\ttype: '${3:type}',\r\n\t\tdata: '${4:data}'\r\n\t}]\r\n\taction :${5:create}\r\nend\r\n",
		"description": "Use the registry_key resource to create and delete registry keys in Microsoft Windows.",
		"scope": "source.ruby.chef"
	},
	"remote_directory": {
		"prefix": "remote_directory",
		"body": "remote_directory '${1:/path/to/directory}' do\r\n\tsource '${2:source_directory}'\r\n\towner '${3:root}'\r\n\tgroup '${4:$3}'\r\n\tmode '${5:0755}'\r\n\taction :${6:create}\r\nend\r\n",
		"description": "A remote_directory resource block transfers a directory from a cookbook to a node, and then assigns the permissions needed on that directory.",
		"scope": "source.ruby.chef"
	},
	"remote_file": {
		"prefix": "remote_file",
		"body": "remote_file '${1:/path/to/file}' do\r\n\tsource '${2:source_file}'\r\n\towner '${3:root}'\r\n\tgroup '${4:$3}'\r\n\tmode '${5:0755}'\r\n\taction :${6:create}\r\nend\r\n",
		"description": "Use the remote_file resource to transfer a file from a remote location using file specificity.",
		"scope": "source.ruby.chef"
	},
	"rhsm_errata_level": {
		"prefix": "rhsm_errata_level",
		"body": "rhsm_errata_level '${1:errata_level}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the rhsm_errata resource to install all packages of a specified errata level from the Red Hat Subscription Manager. For example, you can ensure that all packages associated with errata marked at a “Critical” security level are installed.",
		"scope": "source.ruby.chef"
	},
	"rhsm_errata": {
		"prefix": "rhsm_errata",
		"body": "rhsm_errata '${1:errata_id}' do\r\n\taction :${2:install}'\r\nend\r\n",
		"description": "Use the rhsm_errata resource to install packages associated with a given Red Hat Subscription Manager Errata ID.",
		"scope": "source.ruby.chef"
	},
	"rhsm_register": {
		"prefix": "rhsm_register",
		"body": "rhsm_register '${1:server_host}' do\r\n\taction :${2:register}\r\nend\r\n",
		"description": "Use the rhsm_register resource to register a node with the Red Hat Subscription Manager or a local Red Hat Satellite server.",
		"scope": "source.ruby.chef"
	},
	"rhsm_repo": {
		"prefix": "rhsm_repo",
		"body": "rhsm_repo '${1:repo_name}' do\r\n\taction :${2:enable}\r\nend\r\n",
		"description": "Use the rhsm_repo resource to enable or disable Red Hat Subscription Manager repositories that are made available via attached subscriptions.",
		"scope": "source.ruby.chef"
	},
	"rhsm_subscription": {
		"prefix": "rhsm_subscription",
		"body": "rhsm_subscription '${1:pool_id}' do\r\n\taction :${2:attach}\r\nend\r\n",
		"description": "Use the rhsm_subscription to add and remove Redhat Subscription Manager subscriptions to your host. This can be used when a host’s activation_key does not attach all necessary subscriptions to your host.",
		"scope": "source.ruby.chef"
	},
	"route": {
		"prefix": "route",
		"body": "route '${1:10.0.1.10/32}' do\r\n\tgateway '${2:10.0.0.1}'\r\n\tdevice '${3:eth1}'\r\nend\r\n",
		"description": "Use the route resource to manage the system routing table in a Linux environment.",
		"scope": "source.ruby.chef"
	},
	"rpm_package": {
		"prefix": "rpm_package",
		"body": "rpm_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the rpm_package resource to manage packages for the RPM platform.",
		"scope": "source.ruby.chef"
	},
	"ruby": {
		"prefix": "ruby",
		"body": "ruby '${1:name}' do\r\n\tcode <<-EOH\r\n\t${2:ruby code}\r\n\tEOH\r\nend\r\n",
		"description": "Use the ruby resource to execute a script using Ruby.",
		"scope": "source.ruby.chef"
	},
	"ruby_block": {
		"prefix": "ruby_block",
		"body": "ruby_block '${1:name}' do\r\n\tblock do\r\n\t\t${2:code}\r\n\tend\r\n\taction :${3:run}\r\nend\r\n",
		"description": "Use the ruby_block resource to execute a script block using Ruby.",
		"scope": "source.ruby.chef"
	},
	"script": {
		"prefix": "script",
		"body": "ruby '${1:name}' do\r\n\tinterpreter '${2:bash}'\r\n\tcode <<-EOH\r\n\t${3:code}\r\n\tEOH\r\nend\r\n",
		"description": "Use the script resource to execute a script using a specified interpreter.",
		"scope": "source.ruby.chef"
	},
	"service": {
		"prefix": "service",
		"body": "service '${1:service_name}' do\r\n\taction :${2:start}\r\nend\r\n",
		"description": "Use the service resource to manage a service.",
		"scope": "source.ruby.chef"
	},
	"smartos_package": {
		"prefix": "smartos_package",
		"body": "smartos_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the smartos_package resource to manage packages for the SmartOS platform.",
		"scope": "source.ruby.chef"
	},
	"solaris_package": {
		"prefix": "solaris_package",
		"body": "solaris_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the solaris_package resource to manage packages for the Solaris platform.",
		"scope": "source.ruby.chef"
	},
	"subversion": {
		"prefix": "subversion",
		"body": "subversion '${1:name}' do\r\n\trepository '${2:svn_repository}'\r\n\trevision '${3:HEAD}'\r\n\tdestination '${4:destination_path}'\r\n\taction :${5:sync}\r\nend\r\n",
		"description": "Use the subversion resource to manage source control resources that exist in a Subversion repository.",
		"scope": "source.ruby.chef"
	},
	"sudo": {
		"prefix": "sudo",
		"body": "sudo '${1:filename}' do\r\n\tuser '${2:user}'\r\n\taction :${3:create}\r\nend\r\n",
		"description": "Use the sudo resource to add or remove individual sudo entries using sudoers.d files. Sudo version 1.7.2 or newer is required to use the sudo resource, as it relies on the #includedir directive introduced in version 1.7.2. This resource does not enforce installation of the required sudo version. Chef-supported releases of Ubuntu, Debian and RHEL (6+) all support this feature.",
		"scope": "source.ruby.chef"
	},
	"swap_file": {
		"prefix": "swap_file",
		"body": "swap_file '${1:path}' do\r\n\taction :${2:create}\r\nend\r\n",
		"description": "Use the swap_file resource to create or delete swap files on Linux systems, and optionally to manage the swappiness configuration for a host.",
		"scope": "source.ruby.chef"
	},
	"sysctl": {
		"prefix": "sysctl",
		"body": "sysctl '${1:key}' do\r\n\tvalue '${2:value}'\r\n\taction :${3:apply}\r\nend\r\n",
		"description": "Use the sysctl resource to set or remove kernel parameters using the sysctl command line tool and configuration files in the system’s sysctl.d directory. Configuration files managed by this resource are named 99-chef-KEYNAME.conf. If an existing value was already set, it will be backed up to the node and restored if the :remove action is used later.",
		"scope": "source.ruby.chef"
	},
	"systemd_unit": {
		"prefix": "systemd_unit",
		"body": "systemd_unit '${1:unit}' do\r\n\tcontent <<-EOU.gsub(/^\\s+/, '')\r\n\t[Unit]\r\n\tDescription=Run system activity accounting tool every 10 minutes\r\n\t\r\n\t[Timer]\r\n\tOnCalendar=*:00/10\r\n\t\r\n\t[Install]\r\n\tWantedBy=sysstat.service\r\n\tEOU\r\naction :${2:create}\r\nend\r\n",
		"description": "Use the systemd_unit resource to create, manage, and run systemd units.",
		"scope": "source.ruby.chef"
	},
	"template": {
		"prefix": "template",
		"body": "template '${1:destination_path}' do\r\n\tsource '${2:source_file}'\r\n\towner '${3:root}'\r\n\tgroup '${4:3}'\r\n\tmode '${5:0755}'\r\n\taction :${6:create}\r\nend\r\n",
		"description": "Use the template resource to manage the contents of a file using an Embedded Ruby (ERB) template.",
		"scope": "source.ruby.chef"
	},
	"user": {
		"prefix": "user",
		"body": "user '${1:user_name}' do\r\n\tcomment '${2:comment}'\r\n\tuid '${3:uid}'\r\n\tgid '${4:gid}'\r\n\thome '${5:home_folder}'\r\n\tshell '${6:shell}'\r\n\tpassword '${7:password}'\r\n\taction :${8:create}\r\nend\r\n",
		"description": "Use the user resource to add users, update existing users, remove users, and to lock/unlock user passwords.",
		"scope": "source.ruby.chef"
	},
	"windows_ad_join": {
		"prefix": "windows_ad_join",
		"body": "windows_ad_join '${1:domain_name}' do\r\n\tdomain_user '${2:domain_user}'\r\n\tdomain_password '${3:domain_password}'\r\n\taction :${4:join}\r\nend\r\n",
		"description": "Use the windows_ad_join resource to join a Windows Active Directory domain.",
		"scope": "source.ruby.chef"
	},
	"windows_auto_run": {
		"prefix": "windows_auto_run",
		"body": "windows_auto_run '${1:program_name}' do\r\n\tpath '${2:path}'\r\n\taction :${3:create}\r\nend\r\n",
		"description": "Use the windows_auto_run resource to set applications to run at login.",
		"scope": "source.ruby.chef"
	},
	"windows_env": {
		"prefix": "windows_env",
		"body": "windows_env '${1:name}' do\r\n\tvalue '${2:value}'\r\nend\r\n",
		"description": "Use the windows_env resource to manage environment keys in Microsoft Windows.",
		"scope": "source.ruby.chef"
	},
	"windows_feature": {
		"prefix": "windows_feature",
		"body": "windows_feature '${1:feature_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the windows_feature resource to add, remove or entirely delete Windows features and roles. This resource calls the windows_feature_dism or windows_feature_powershell resources depending on the specified installation method, and defaults to DISM, which is available on both Workstation and Server editions of Windows.",
		"scope": "source.ruby.chef"
	},
	"windows_feature_dism": {
		"prefix": "windows_feature_dism",
		"body": "windows_feature_dism '${1:feature_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the windows_feature_dism resource to add, remove, or entirely delete Windows features and roles using DISM.",
		"scope": "source.ruby.chef"
	},
	"windows_feature_powershell": {
		"prefix": "windows_feature_powershell",
		"body": "windows_feature_powershell '${1:feature_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the windows_feature_powershell resource to add, remove or entirely delete Windows features and roles via PowerShell. This resource offers significant speed benefits over the windows_feature_dism resource, but requires installation of the Remote Server Administration Tools on non-server releases of Windows.",
		"scope": "source.ruby.chef"
	},
	"windows_font": {
		"prefix": "windows_font",
		"body": "windows_font '${1:font_name}' do\r\n\tsource '${2:source}\r\n\taction :${3:install}\r\nend\r\n",
		"description": "Use the windows_font resource to install font files on Windows. By default, the font is sourced from the cookbook using the resource, but a URI source can be specified as well.",
		"scope": "source.ruby.chef"
	},
	"windows_package": {
		"prefix": "windows_package",
		"body": "windows_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the windows_package resource to manage packages for the Windows platform.",
		"scope": "source.ruby.chef"
	},
	"windows_path": {
		"prefix": "windows_path",
		"body": "windows_path '${1:path}' do\r\n\taction :${2:add}\r\nend\r\n",
		"description": "Use the windows_path resource to manage the path environment variable on Microsoft Windows.",
		"scope": "source.ruby.chef"
	},
	"windows_printer": {
		"prefix": "windows_printer",
		"body": "windows_printer '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the windows_printer resource to setup Windows printers. This resource does not install a printer driver; you must already have the driver installed on the system.",
		"scope": "source.ruby.chef"
	},
	"windows_printer_port": {
		"prefix": "windows_printer_port",
		"body": "windows_printer_port '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "",
		"scope": "source.ruby.chef"
	},
	"windows_service": {
		"prefix": "windows_service",
		"body": "windows_service '${1:service_name}' do\r\n\taction :${2:start}\r\n\tstartup_type :${2:manual}\r\nend\r\n",
		"description": "Use the windows_service resource to manage a Windows service.",
		"scope": "source.ruby.chef"
	},
	"windows_shortcut": {
		"prefix": "windows_shortcut",
		"body": "windows_shortcut '${1:service_name}' do\r\n\taction :${2:start}\r\n\tstartup_type :${2:manual}\r\nend\r\n",
		"description": "",
		"scope": "source.ruby.chef"
	},
	"windows_task": {
		"prefix": "windows_task",
		"body": "windows_task '${1:service_name}' do\r\n\taction :${2:start}\r\n\tstartup_type :${2:manual}\r\nend\r\n",
		"description": "",
		"scope": "source.ruby.chef"
	},
	"yum_package": {
		"prefix": "yum_package",
		"body": "yum_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "Use the yum_package resource to manage packages for the RedHat and CentOS platforms.",
		"scope": "source.ruby.chef"
	},
	"yum_repository": {
		"prefix": "yum_repository",
		"body": "yum_repository '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "",
		"scope": "source.ruby.chef"
	},
	"zypper_package": {
		"prefix": "zypper_package",
		"body": "zypper_package '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "",
		"scope": "source.ruby.chef"
	},
	"zypper_repository": {
		"prefix": "zypper_repository",
		"body": "zypper_repository '${1:package_name}' do\r\n\taction :${2:install}\r\nend\r\n",
		"description": "",
		"scope": "source.ruby.chef"
	}
}